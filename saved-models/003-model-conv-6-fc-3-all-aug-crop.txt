correction_factor: 0.20

val_loss:
[0.04239562436938286,
 0.026575307250022887,
 0.02331692638496558,
 0.021338750372330347,
 0.019596537599960964,
 0.01833690666904052,
 0.017652159767846266,
 0.018013798023263614,
 0.016859745445350807,
 0.016032013210157552,
 0.015686905508240066,
 0.01513692069798708,
 0.013195327787349621,
 0.012473785274972518,
 0.01183805820842584,
 0.011257479848961036,
 0.010803459994494915,
 0.010646682394047579,
 0.010085914718608062,
 0.01006790245572726]

loss:
[0.6421046884996551,
 0.08898611041250024,
 0.055118883443235164,
 0.04097519424493329,
 0.0335178279141552,
 0.029700283870794052,
 0.026808503773867887,
 0.024669948095870375,
 0.022963576866592283,
 0.02176580229693671,
 0.02087293902220223,
 0.0198048311332086,
 0.01814185361380989,
 0.016850880464767896,
 0.015728026034428036,
 0.014775566264764218,
 0.014165123909142525,
 0.013610699726113944,
 0.012907024712744247,
 0.012485950131687115]


# ==========================================================================================


model = Sequential()

model.add(Cropping2D(cropping=((50,20), (0,0)), input_shape=input_shape))

model.add(Lambda(lambda x: x / 255.0 - 0.5, input_shape=input_shape))

model.add(Conv2D(16, (5, 5), strides=(1, 1), name="conv_layer_01", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_01"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_02", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_2"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_03", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_3"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_04", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_4"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_05", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_5"))

model.add(Conv2D(32, (1, 1), strides=(1, 1), name="conv_layer_06", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_6"))

model.add(Flatten())

# model.add(Dense(64, activation=None, name="fc1"))
# model.add(Dropout(rate=0.25))

model.add(Dense(32, activation=None, name="fc2"))
model.add(Dropout(rate=0.25))

model.add(Dense(16, activation=None, name="fc3"))
model.add(Dropout(rate=0.25))

model.add(Dense(1, activation=None, name="fc4"))

# x = Dense(labelCategoriesCount, activation="softmax", name="fc3")(x)
# model = Model(inputs=input_ph, outputs=k_layer, name="estimate_steering")

model.summary()

