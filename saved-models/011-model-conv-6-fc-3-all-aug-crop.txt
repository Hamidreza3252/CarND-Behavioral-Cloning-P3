correction_factor: 0.10

val_loss:
[0.022908362510303655,
 0.017146214557190734,
 0.016054343146582443,
 0.015139938828845819,
 0.014146461660663287,
 0.013013311885297299,
 0.012487601817895969,
 0.0119560061643521,
 0.011642055983344713,
 0.011350177147736153,
 0.011011775806546211,
 0.011151735987514257,
 0.010850069466978312,
 0.010883754628400008,
 0.010604190112402042,
 0.010431073078264793,
 0.010377075939128797,
 0.010168081851055225,
 0.010359637457877397,
 0.010064438730478287]

loss:
[0.30376339440181405,
 0.0425700679718458,
 0.0274016271496928,
 0.022473791515163804,
 0.01976407230816212,
 0.01755530356067508,
 0.015923776670028006,
 0.014519235272381293,
 0.013847876053947052,
 0.013294449506135677,
 0.012749145434012147,
 0.01248390523351704,
 0.012106656633701139,
 0.011763825681543232,
 0.011487378831643401,
 0.011126751615433797,
 0.010956986109568332,
 0.01062105816055671,
 0.01040237160721342,
 0.010236822676680907]


# ==========================================================================================


model = Sequential()

model.add(Cropping2D(cropping=((50,20), (0,0)), input_shape=input_shape))

model.add(Lambda(lambda x: x / 255.0 - 0.5, input_shape=input_shape))

model.add(Conv2D(16, (5, 5), strides=(1, 1), name="conv_layer_01", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_01"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_02", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_2"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_03", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_3"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_04", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_4"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_05", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_5"))

model.add(Conv2D(32, (1, 1), strides=(1, 1), name="conv_layer_06", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_6"))

model.add(Flatten())

# model.add(Dense(64, activation=None, name="fc1"))
# model.add(Dropout(rate=0.25))

model.add(Dense(32, activation=None, name="fc2"))
model.add(Dropout(rate=0.25))

model.add(Dense(16, activation=None, name="fc3"))
model.add(Dropout(rate=0.25))

model.add(Dense(1, activation=None, name="fc4"))

# x = Dense(labelCategoriesCount, activation="softmax", name="fc3")(x)
# model = Model(inputs=input_ph, outputs=k_layer, name="estimate_steering")

model.summary()

