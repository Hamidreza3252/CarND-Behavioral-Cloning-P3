
val_loss:
[0.1665111881494522,
 0.07761409670114518,
 0.04631353512406349,
 0.03332746982574463,
 0.026278269067406653,
 0.021199624724686145,
 0.018992306403815745,
 0.016533046402037142]

loss:
[2.35758994191885,
 0.2662863327562809,
 0.1571349959075451,
 0.10591297790408134,
 0.07810955550521612,
 0.059444880448281764,
 0.049836967047303914,
 0.04294959222897887]


# ==========================================================================================


model = Sequential()
model.add(Lambda(lambda x: x / 255.0 - 0.5, input_shape=input_shape))

model.add(Conv2D(16, (5, 5), strides=(1, 1), name="conv_layer_01", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_01"))

model.add(Conv2D(16, (3, 3), strides=(1, 1), name="conv_layer_02", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_2"))

model.add(Conv2D(32, (3, 3), strides=(1, 1), name="conv_layer_03", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_3"))

model.add(Conv2D(32, (3, 3), strides=(1, 1), name="conv_layer_04", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_4"))

model.add(Conv2D(64, (3, 3), strides=(1, 1), name="conv_layer_05", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_5"))

model.add(Conv2D(64, (1, 1), strides=(1, 1), name="conv_layer_06", padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2), name="max_pool_6"))

model.add(Flatten())

# model.add(Dense(64, activation=None, name="fc1"))
# model.add(Dropout(rate=0.25))

model.add(Dense(32, activation=None, name="fc2"))
model.add(Dropout(rate=0.25))

model.add(Dense(16, activation=None, name="fc3"))
model.add(Dropout(rate=0.25))

model.add(Dense(1, activation=None, name="fc4"))

# x = Dense(labelCategoriesCount, activation="softmax", name="fc3")(x)
# model = Model(inputs=input_ph, outputs=k_layer, name="estimate_steering")

model.summary()

